// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: amp/apps/amp-app-av/av.proto

package av

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	amp "github.com/amp-3d/amp-sdk-go/amp"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MediaFlags int32

const (
	Unknown      MediaFlags = 0
	HasAudio     MediaFlags = 256
	HasVideo     MediaFlags = 512
	HasSpeech    MediaFlags = 1024
	NeedsNetwork MediaFlags = 2048
	IsLive       MediaFlags = 1
	IsSeekable   MediaFlags = 2
	IsUnending   MediaFlags = 4
	// When set, the user is more likely to skipping short intervals than switch media items.
	SkipIsLikely MediaFlags = 16
)

var MediaFlags_name = map[int32]string{
	0:    "Unknown",
	256:  "HasAudio",
	512:  "HasVideo",
	1024: "HasSpeech",
	2048: "NeedsNetwork",
	1:    "IsLive",
	2:    "IsSeekable",
	4:    "IsUnending",
	16:   "SkipIsLikely",
}

var MediaFlags_value = map[string]int32{
	"Unknown":      0,
	"HasAudio":     256,
	"HasVideo":     512,
	"HasSpeech":    1024,
	"NeedsNetwork": 2048,
	"IsLive":       1,
	"IsSeekable":   2,
	"IsUnending":   4,
	"SkipIsLikely": 16,
}

func (MediaFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{0}
}

type LoginInfo struct {
	UserID       string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Pass         string `protobuf:"bytes,2,opt,name=Pass,proto3" json:"Pass,omitempty"`
	TokenValue   string `protobuf:"bytes,3,opt,name=TokenValue,proto3" json:"TokenValue,omitempty"`
	TokenExpires int64  `protobuf:"varint,4,opt,name=TokenExpires,proto3" json:"TokenExpires,omitempty"`
}

func (m *LoginInfo) Reset()      { *m = LoginInfo{} }
func (*LoginInfo) ProtoMessage() {}
func (*LoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{0}
}
func (m *LoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginInfo.Merge(m, src)
}
func (m *LoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *LoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LoginInfo proto.InternalMessageInfo

func (m *LoginInfo) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *LoginInfo) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

func (m *LoginInfo) GetTokenValue() string {
	if m != nil {
		return m.TokenValue
	}
	return ""
}

func (m *LoginInfo) GetTokenExpires() int64 {
	if m != nil {
		return m.TokenExpires
	}
	return 0
}

type LoginCreateResponse struct {
	TimestampExpires string `protobuf:"bytes,1,opt,name=timestamp_expires,json=timestampExpires,proto3" json:"timestamp_expires,omitempty"`
	Token            string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ChatStatus       string `protobuf:"bytes,3,opt,name=chat_status,json=chatStatus,proto3" json:"chat_status,omitempty"`
	ChatVersion      int64  `protobuf:"varint,4,opt,name=chat_version,json=chatVersion,proto3" json:"chat_version,omitempty"`
}

func (m *LoginCreateResponse) Reset()      { *m = LoginCreateResponse{} }
func (*LoginCreateResponse) ProtoMessage() {}
func (*LoginCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{1}
}
func (m *LoginCreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginCreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginCreateResponse.Merge(m, src)
}
func (m *LoginCreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoginCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginCreateResponse proto.InternalMessageInfo

func (m *LoginCreateResponse) GetTimestampExpires() string {
	if m != nil {
		return m.TimestampExpires
	}
	return ""
}

func (m *LoginCreateResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginCreateResponse) GetChatStatus() string {
	if m != nil {
		return m.ChatStatus
	}
	return ""
}

func (m *LoginCreateResponse) GetChatVersion() int64 {
	if m != nil {
		return m.ChatVersion
	}
	return 0
}

type CategoryInfo struct {
	Id                uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category          string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Title             string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description       string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type              string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Subtype           string `protobuf:"bytes,6,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Image             string `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	TimestampCreated  string `protobuf:"bytes,8,opt,name=timestamp_created,json=timestampCreated,proto3" json:"timestamp_created,omitempty"`
	TimestampModified string `protobuf:"bytes,9,opt,name=timestamp_modified,json=timestampModified,proto3" json:"timestamp_modified,omitempty"`
}

func (m *CategoryInfo) Reset()      { *m = CategoryInfo{} }
func (*CategoryInfo) ProtoMessage() {}
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{2}
}
func (m *CategoryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CategoryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CategoryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CategoryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CategoryInfo.Merge(m, src)
}
func (m *CategoryInfo) XXX_Size() int {
	return m.Size()
}
func (m *CategoryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CategoryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CategoryInfo proto.InternalMessageInfo

func (m *CategoryInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CategoryInfo) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CategoryInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CategoryInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CategoryInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CategoryInfo) GetSubtype() string {
	if m != nil {
		return m.Subtype
	}
	return ""
}

func (m *CategoryInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CategoryInfo) GetTimestampCreated() string {
	if m != nil {
		return m.TimestampCreated
	}
	return ""
}

func (m *CategoryInfo) GetTimestampModified() string {
	if m != nil {
		return m.TimestampModified
	}
	return ""
}

type StationInfo struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category    string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Subtype     string `protobuf:"bytes,6,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Image       string `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	Author      string `protobuf:"bytes,8,opt,name=author,proto3" json:"author,omitempty"`
	Url         string `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Summary     string `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (m *StationInfo) Reset()      { *m = StationInfo{} }
func (*StationInfo) ProtoMessage() {}
func (*StationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{3}
}
func (m *StationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationInfo.Merge(m, src)
}
func (m *StationInfo) XXX_Size() int {
	return m.Size()
}
func (m *StationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StationInfo proto.InternalMessageInfo

func (m *StationInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StationInfo) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *StationInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *StationInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *StationInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StationInfo) GetSubtype() string {
	if m != nil {
		return m.Subtype
	}
	return ""
}

func (m *StationInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *StationInfo) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *StationInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StationInfo) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

// Invokes an fully featured media player over a panel.
type PlayableMediaItem struct {
	Flags       MediaFlags      `protobuf:"varint,1,opt,name=Flags,proto3,enum=av.MediaFlags" json:"Flags,omitempty"`
	Title       string          `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	AuthorDesc  string          `protobuf:"bytes,5,opt,name=AuthorDesc,proto3" json:"AuthorDesc,omitempty"`
	Collection  string          `protobuf:"bytes,6,opt,name=Collection,proto3" json:"Collection,omitempty"`
	ItemNumber  int32           `protobuf:"varint,10,opt,name=ItemNumber,proto3" json:"ItemNumber,omitempty"`
	Seconds     float64         `protobuf:"fixed64,11,opt,name=Seconds,proto3" json:"Seconds,omitempty"`
	Popularity  float32         `protobuf:"fixed32,12,opt,name=Popularity,proto3" json:"Popularity,omitempty"`
	ReleaseDate int64           `protobuf:"varint,14,opt,name=ReleaseDate,proto3" json:"ReleaseDate,omitempty"`
	Tracks      []*amp.AssetTag `protobuf:"bytes,22,rep,name=Tracks,proto3" json:"Tracks,omitempty"`
	CoverArt    []*amp.AssetTag `protobuf:"bytes,23,rep,name=CoverArt,proto3" json:"CoverArt,omitempty"`
}

func (m *PlayableMediaItem) Reset()      { *m = PlayableMediaItem{} }
func (*PlayableMediaItem) ProtoMessage() {}
func (*PlayableMediaItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{4}
}
func (m *PlayableMediaItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayableMediaItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayableMediaItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayableMediaItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayableMediaItem.Merge(m, src)
}
func (m *PlayableMediaItem) XXX_Size() int {
	return m.Size()
}
func (m *PlayableMediaItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayableMediaItem.DiscardUnknown(m)
}

var xxx_messageInfo_PlayableMediaItem proto.InternalMessageInfo

func (m *PlayableMediaItem) GetFlags() MediaFlags {
	if m != nil {
		return m.Flags
	}
	return Unknown
}

func (m *PlayableMediaItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PlayableMediaItem) GetAuthorDesc() string {
	if m != nil {
		return m.AuthorDesc
	}
	return ""
}

func (m *PlayableMediaItem) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *PlayableMediaItem) GetItemNumber() int32 {
	if m != nil {
		return m.ItemNumber
	}
	return 0
}

func (m *PlayableMediaItem) GetSeconds() float64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *PlayableMediaItem) GetPopularity() float32 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

func (m *PlayableMediaItem) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *PlayableMediaItem) GetTracks() []*amp.AssetTag {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *PlayableMediaItem) GetCoverArt() []*amp.AssetTag {
	if m != nil {
		return m.CoverArt
	}
	return nil
}

type MediaPlaylist struct {
	TotalItems    int32   `protobuf:"varint,5,opt,name=TotalItems,proto3" json:"TotalItems,omitempty"`
	TotalDuration float64 `protobuf:"fixed64,6,opt,name=TotalDuration,proto3" json:"TotalDuration,omitempty"`
}

func (m *MediaPlaylist) Reset()      { *m = MediaPlaylist{} }
func (*MediaPlaylist) ProtoMessage() {}
func (*MediaPlaylist) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{5}
}
func (m *MediaPlaylist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaPlaylist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaPlaylist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaPlaylist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaPlaylist.Merge(m, src)
}
func (m *MediaPlaylist) XXX_Size() int {
	return m.Size()
}
func (m *MediaPlaylist) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaPlaylist.DiscardUnknown(m)
}

var xxx_messageInfo_MediaPlaylist proto.InternalMessageInfo

func (m *MediaPlaylist) GetTotalItems() int32 {
	if m != nil {
		return m.TotalItems
	}
	return 0
}

func (m *MediaPlaylist) GetTotalDuration() float64 {
	if m != nil {
		return m.TotalDuration
	}
	return 0
}

type MediaProviderInfo struct {
	CommonName           string `protobuf:"bytes,1,opt,name=CommonName,proto3" json:"CommonName,omitempty"`
	RequiresSubscription bool   `protobuf:"varint,2,opt,name=RequiresSubscription,proto3" json:"RequiresSubscription,omitempty"`
	RequiresInternet     bool   `protobuf:"varint,3,opt,name=RequiresInternet,proto3" json:"RequiresInternet,omitempty"`
}

func (m *MediaProviderInfo) Reset()      { *m = MediaProviderInfo{} }
func (*MediaProviderInfo) ProtoMessage() {}
func (*MediaProviderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2c113e2453103f2, []int{6}
}
func (m *MediaProviderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MediaProviderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MediaProviderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MediaProviderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MediaProviderInfo.Merge(m, src)
}
func (m *MediaProviderInfo) XXX_Size() int {
	return m.Size()
}
func (m *MediaProviderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MediaProviderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MediaProviderInfo proto.InternalMessageInfo

func (m *MediaProviderInfo) GetCommonName() string {
	if m != nil {
		return m.CommonName
	}
	return ""
}

func (m *MediaProviderInfo) GetRequiresSubscription() bool {
	if m != nil {
		return m.RequiresSubscription
	}
	return false
}

func (m *MediaProviderInfo) GetRequiresInternet() bool {
	if m != nil {
		return m.RequiresInternet
	}
	return false
}

func init() {
	proto.RegisterEnum("av.MediaFlags", MediaFlags_name, MediaFlags_value)
	proto.RegisterType((*LoginInfo)(nil), "av.LoginInfo")
	proto.RegisterType((*LoginCreateResponse)(nil), "av.LoginCreateResponse")
	proto.RegisterType((*CategoryInfo)(nil), "av.CategoryInfo")
	proto.RegisterType((*StationInfo)(nil), "av.StationInfo")
	proto.RegisterType((*PlayableMediaItem)(nil), "av.PlayableMediaItem")
	proto.RegisterType((*MediaPlaylist)(nil), "av.MediaPlaylist")
	proto.RegisterType((*MediaProviderInfo)(nil), "av.MediaProviderInfo")
}

func init() { proto.RegisterFile("amp/apps/amp-app-av/av.proto", fileDescriptor_f2c113e2453103f2) }

var fileDescriptor_f2c113e2453103f2 = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0xce, 0x38, 0x4d, 0x9a, 0xbc, 0xf9, 0x23, 0x77, 0x7e, 0xfb, 0x2b, 0xd6, 0x0a, 0x99, 0x10,
	0x2d, 0x52, 0x58, 0xd4, 0x54, 0x2a, 0x37, 0x6e, 0xa1, 0x05, 0x6d, 0xa4, 0x6d, 0x55, 0x39, 0x6d,
	0xaf, 0xab, 0x49, 0xfc, 0x6e, 0x3a, 0x8a, 0xed, 0x31, 0x33, 0xe3, 0x2c, 0x11, 0x97, 0x7c, 0x04,
	0x04, 0x17, 0x0e, 0x7c, 0x00, 0xc4, 0x27, 0xe1, 0xd8, 0xe3, 0x5e, 0x90, 0x68, 0x7a, 0xe1, 0xb8,
	0x57, 0x6e, 0x68, 0xc6, 0x4e, 0xeb, 0xc2, 0x7e, 0x01, 0x6e, 0xf3, 0x3c, 0xcf, 0xeb, 0xf7, 0xcf,
	0xe3, 0xd7, 0x63, 0xf8, 0x90, 0xc5, 0xe9, 0x21, 0x4b, 0x53, 0x75, 0xc8, 0xe2, 0xf4, 0x80, 0xa5,
	0xe9, 0x01, 0x5b, 0x1e, 0xb2, 0xe5, 0x30, 0x95, 0x42, 0x0b, 0xea, 0xb0, 0xe5, 0xd3, 0xff, 0xe7,
	0x11, 0x7c, 0xc8, 0xe2, 0x74, 0xa8, 0xc2, 0x45, 0x2e, 0xf5, 0xbf, 0x83, 0xe6, 0x4b, 0x31, 0xe7,
	0xc9, 0x38, 0x79, 0x2d, 0xe8, 0x3e, 0xd4, 0x2f, 0x15, 0xca, 0xf1, 0x89, 0x47, 0x7a, 0x64, 0xd0,
	0x0c, 0x0a, 0x44, 0x29, 0xec, 0x9c, 0x33, 0xa5, 0x3c, 0xc7, 0xb2, 0xf6, 0x4c, 0x7d, 0x80, 0x0b,
	0xb1, 0xc0, 0xe4, 0x8a, 0x45, 0x19, 0x7a, 0x55, 0xab, 0x94, 0x18, 0xda, 0x87, 0xb6, 0x45, 0x5f,
	0x7d, 0x9b, 0x72, 0x89, 0xca, 0xdb, 0xe9, 0x91, 0x41, 0x35, 0x78, 0xc4, 0xf5, 0x7f, 0x26, 0xf0,
	0x3f, 0x5b, 0xfd, 0x58, 0x22, 0xd3, 0x18, 0xa0, 0x4a, 0x45, 0xa2, 0x90, 0x7e, 0x06, 0x7b, 0x9a,
	0xc7, 0xa8, 0x34, 0x8b, 0xd3, 0x57, 0x58, 0x24, 0xc8, 0x5b, 0x72, 0xef, 0x85, 0x22, 0x09, 0x7d,
	0x02, 0x35, 0x6d, 0x92, 0x16, 0xdd, 0xe5, 0x80, 0x7e, 0x04, 0xad, 0xd9, 0x35, 0xd3, 0xaf, 0x94,
	0x66, 0x3a, 0x53, 0xdb, 0xfe, 0x0c, 0x35, 0xb1, 0x0c, 0xfd, 0x18, 0xda, 0x36, 0x60, 0x89, 0x52,
	0x71, 0x91, 0x14, 0xfd, 0xd9, 0x87, 0xae, 0x72, 0xaa, 0xff, 0x83, 0x03, 0xed, 0x63, 0xa6, 0x71,
	0x2e, 0xe4, 0xca, 0xfa, 0xd3, 0x05, 0x87, 0x87, 0xb6, 0x91, 0x4e, 0xe0, 0xf0, 0x90, 0x3e, 0x85,
	0xc6, 0xac, 0xd0, 0x8b, 0xea, 0xf7, 0xd8, 0xb6, 0xc5, 0x75, 0xb4, 0xb5, 0x26, 0x07, 0xb4, 0x07,
	0xad, 0x10, 0xd5, 0x4c, 0xf2, 0x54, 0x6f, 0x8b, 0x36, 0x83, 0x32, 0x65, 0xbc, 0xd6, 0xab, 0x14,
	0xbd, 0x5a, 0xee, 0xb5, 0x39, 0x53, 0x0f, 0x76, 0x55, 0x36, 0xb5, 0x74, 0xdd, 0xd2, 0x5b, 0x68,
	0xaa, 0xf0, 0x98, 0xcd, 0xd1, 0xdb, 0xcd, 0xab, 0x58, 0xf0, 0xd8, 0xbf, 0x99, 0xf5, 0x36, 0xf4,
	0x1a, 0xff, 0xf0, 0x2f, 0xf7, 0x3c, 0xa4, 0x07, 0x40, 0x1f, 0x82, 0x63, 0x11, 0xf2, 0xd7, 0x1c,
	0x43, 0xaf, 0x69, 0xa3, 0x1f, 0xd2, 0x9c, 0x16, 0x42, 0xff, 0x2f, 0x02, 0x2d, 0x63, 0x21, 0x17,
	0xc9, 0x7f, 0xca, 0x93, 0x7d, 0xa8, 0xb3, 0x4c, 0x5f, 0x0b, 0x59, 0x18, 0x51, 0x20, 0xea, 0x42,
	0x35, 0x93, 0x51, 0x31, 0xaf, 0x39, 0xe6, 0x99, 0xe3, 0x98, 0xc9, 0x95, 0x07, 0xdb, 0xcc, 0x16,
	0xf6, 0x7f, 0x77, 0x60, 0xef, 0x3c, 0x62, 0x2b, 0x36, 0x8d, 0xf0, 0x14, 0x43, 0xce, 0xc6, 0x1a,
	0x63, 0xfa, 0x0c, 0x6a, 0x5f, 0x47, 0x6c, 0x9e, 0x6f, 0x68, 0xf7, 0xa8, 0x3b, 0x64, 0xcb, 0xa1,
	0x55, 0x2d, 0x1b, 0xe4, 0xa2, 0xe9, 0xea, 0xc2, 0xce, 0x5e, 0xac, 0xa9, 0x05, 0xe6, 0x2b, 0x1a,
	0xd9, 0x3e, 0x4e, 0x50, 0xcd, 0x8a, 0xf9, 0x4a, 0x8c, 0xd1, 0x8f, 0x45, 0x14, 0xe1, 0xcc, 0x5a,
	0x93, 0x0f, 0x5a, 0x62, 0x8c, 0x6e, 0x7a, 0x38, 0xcb, 0xe2, 0x29, 0x4a, 0xdb, 0x6e, 0x2d, 0x28,
	0x31, 0x66, 0x96, 0x09, 0xce, 0x44, 0x12, 0x2a, 0xaf, 0xd5, 0x23, 0x03, 0x12, 0x6c, 0xa1, 0x79,
	0xf2, 0x5c, 0xa4, 0x59, 0xc4, 0x24, 0xd7, 0x2b, 0xaf, 0xdd, 0x23, 0x03, 0x27, 0x28, 0x31, 0xe6,
	0xad, 0x04, 0x18, 0x21, 0x53, 0x78, 0xc2, 0x34, 0x7a, 0xdd, 0xfc, 0xf3, 0x28, 0x51, 0xf4, 0x13,
	0xa8, 0x5f, 0x48, 0x36, 0x5b, 0x28, 0x6f, 0xbf, 0x57, 0x1d, 0xb4, 0x8e, 0x3a, 0xf6, 0x6a, 0x19,
	0x29, 0x85, 0xfa, 0x82, 0xcd, 0x83, 0x42, 0xa4, 0x9f, 0x42, 0xe3, 0x58, 0x2c, 0x51, 0x8e, 0xa4,
	0xf6, 0x3e, 0x78, 0x5f, 0xe0, 0xbd, 0xdc, 0xbf, 0x84, 0x8e, 0x35, 0xce, 0x78, 0x1c, 0x71, 0xa5,
	0xf3, 0x4b, 0x46, 0xb3, 0xc8, 0x4c, 0xa4, 0xac, 0x3d, 0xb5, 0xa0, 0xc4, 0xd0, 0x67, 0xd0, 0xb1,
	0xe8, 0x24, 0x93, 0xec, 0xde, 0x21, 0x12, 0x3c, 0x26, 0xfb, 0x3f, 0x12, 0xd8, 0xcb, 0xf3, 0x4a,
	0xb1, 0xe4, 0x21, 0x4a, 0xbb, 0xb8, 0xd6, 0xda, 0x38, 0x16, 0xc9, 0x19, 0x8b, 0xb1, 0xb8, 0x5d,
	0x4a, 0x0c, 0x3d, 0x82, 0x27, 0x01, 0x7e, 0x93, 0x99, 0x3b, 0x66, 0x92, 0x4d, 0x1f, 0xf6, 0xd3,
	0xbc, 0xbf, 0x46, 0xf0, 0x5e, 0x8d, 0x3e, 0x07, 0x77, 0xcb, 0x8f, 0x13, 0x8d, 0x32, 0x41, 0x6d,
	0x77, 0xbd, 0x11, 0xfc, 0x8b, 0x7f, 0xfe, 0x13, 0x01, 0x78, 0x58, 0x13, 0xda, 0x82, 0xdd, 0xcb,
	0x64, 0x91, 0x88, 0x37, 0x89, 0x5b, 0xa1, 0x1d, 0x68, 0xbc, 0x60, 0x6a, 0x94, 0x85, 0x5c, 0xb8,
	0x6b, 0xa7, 0x80, 0x57, 0x3c, 0x44, 0xe1, 0xae, 0x77, 0x68, 0x17, 0x9a, 0x2f, 0x98, 0x9a, 0xa4,
	0x88, 0xb3, 0x6b, 0x77, 0xdd, 0xa0, 0x7b, 0xd0, 0x3e, 0x43, 0x0c, 0xd5, 0x19, 0xea, 0x37, 0x42,
	0x2e, 0xdc, 0xb5, 0x4b, 0x01, 0xea, 0x63, 0xf5, 0x92, 0x2f, 0xd1, 0x25, 0xb4, 0x0b, 0x30, 0x56,
	0x13, 0xc4, 0x85, 0x59, 0x5b, 0xd7, 0xc9, 0xf1, 0x65, 0x82, 0x49, 0xc8, 0x93, 0xb9, 0xbb, 0x43,
	0x5d, 0x68, 0x4f, 0x16, 0x3c, 0x35, 0xf1, 0x0b, 0x8c, 0x56, 0xae, 0xfb, 0xe5, 0x17, 0x37, 0xb7,
	0x7e, 0xe5, 0xed, 0xad, 0x5f, 0x79, 0x77, 0xeb, 0x93, 0xf5, 0xc6, 0x27, 0xbf, 0x6c, 0x7c, 0xf2,
	0xdb, 0xc6, 0x27, 0x37, 0x1b, 0x9f, 0xfc, 0xb1, 0xf1, 0xc9, 0x9f, 0x1b, 0xbf, 0xf2, 0x6e, 0xe3,
	0x93, 0xef, 0xef, 0xfc, 0xca, 0xcd, 0x9d, 0x5f, 0x79, 0x7b, 0xe7, 0x57, 0x7e, 0x75, 0xaa, 0xa3,
	0xd3, 0xf3, 0x69, 0xdd, 0xfe, 0x57, 0x3e, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xc0, 0x99,
	0x16, 0x92, 0x06, 0x00, 0x00,
}

func (x MediaFlags) String() string {
	s, ok := MediaFlags_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *LoginInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginInfo)
	if !ok {
		that2, ok := that.(LoginInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.Pass != that1.Pass {
		return false
	}
	if this.TokenValue != that1.TokenValue {
		return false
	}
	if this.TokenExpires != that1.TokenExpires {
		return false
	}
	return true
}
func (this *LoginCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoginCreateResponse)
	if !ok {
		that2, ok := that.(LoginCreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimestampExpires != that1.TimestampExpires {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if this.ChatStatus != that1.ChatStatus {
		return false
	}
	if this.ChatVersion != that1.ChatVersion {
		return false
	}
	return true
}
func (this *CategoryInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CategoryInfo)
	if !ok {
		that2, ok := that.(CategoryInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Subtype != that1.Subtype {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.TimestampCreated != that1.TimestampCreated {
		return false
	}
	if this.TimestampModified != that1.TimestampModified {
		return false
	}
	return true
}
func (this *StationInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StationInfo)
	if !ok {
		that2, ok := that.(StationInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Subtype != that1.Subtype {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.Author != that1.Author {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Summary != that1.Summary {
		return false
	}
	return true
}
func (this *PlayableMediaItem) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlayableMediaItem)
	if !ok {
		that2, ok := that.(PlayableMediaItem)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.AuthorDesc != that1.AuthorDesc {
		return false
	}
	if this.Collection != that1.Collection {
		return false
	}
	if this.ItemNumber != that1.ItemNumber {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	if this.Popularity != that1.Popularity {
		return false
	}
	if this.ReleaseDate != that1.ReleaseDate {
		return false
	}
	if len(this.Tracks) != len(that1.Tracks) {
		return false
	}
	for i := range this.Tracks {
		if !this.Tracks[i].Equal(that1.Tracks[i]) {
			return false
		}
	}
	if len(this.CoverArt) != len(that1.CoverArt) {
		return false
	}
	for i := range this.CoverArt {
		if !this.CoverArt[i].Equal(that1.CoverArt[i]) {
			return false
		}
	}
	return true
}
func (this *MediaPlaylist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MediaPlaylist)
	if !ok {
		that2, ok := that.(MediaPlaylist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalItems != that1.TotalItems {
		return false
	}
	if this.TotalDuration != that1.TotalDuration {
		return false
	}
	return true
}
func (this *MediaProviderInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MediaProviderInfo)
	if !ok {
		that2, ok := that.(MediaProviderInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommonName != that1.CommonName {
		return false
	}
	if this.RequiresSubscription != that1.RequiresSubscription {
		return false
	}
	if this.RequiresInternet != that1.RequiresInternet {
		return false
	}
	return true
}
func (this *LoginInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&av.LoginInfo{")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "Pass: "+fmt.Sprintf("%#v", this.Pass)+",\n")
	s = append(s, "TokenValue: "+fmt.Sprintf("%#v", this.TokenValue)+",\n")
	s = append(s, "TokenExpires: "+fmt.Sprintf("%#v", this.TokenExpires)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoginCreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&av.LoginCreateResponse{")
	s = append(s, "TimestampExpires: "+fmt.Sprintf("%#v", this.TimestampExpires)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	s = append(s, "ChatStatus: "+fmt.Sprintf("%#v", this.ChatStatus)+",\n")
	s = append(s, "ChatVersion: "+fmt.Sprintf("%#v", this.ChatVersion)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CategoryInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&av.CategoryInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Subtype: "+fmt.Sprintf("%#v", this.Subtype)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "TimestampCreated: "+fmt.Sprintf("%#v", this.TimestampCreated)+",\n")
	s = append(s, "TimestampModified: "+fmt.Sprintf("%#v", this.TimestampModified)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StationInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&av.StationInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Category: "+fmt.Sprintf("%#v", this.Category)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Subtype: "+fmt.Sprintf("%#v", this.Subtype)+",\n")
	s = append(s, "Image: "+fmt.Sprintf("%#v", this.Image)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", this.Author)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Summary: "+fmt.Sprintf("%#v", this.Summary)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlayableMediaItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&av.PlayableMediaItem{")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "AuthorDesc: "+fmt.Sprintf("%#v", this.AuthorDesc)+",\n")
	s = append(s, "Collection: "+fmt.Sprintf("%#v", this.Collection)+",\n")
	s = append(s, "ItemNumber: "+fmt.Sprintf("%#v", this.ItemNumber)+",\n")
	s = append(s, "Seconds: "+fmt.Sprintf("%#v", this.Seconds)+",\n")
	s = append(s, "Popularity: "+fmt.Sprintf("%#v", this.Popularity)+",\n")
	s = append(s, "ReleaseDate: "+fmt.Sprintf("%#v", this.ReleaseDate)+",\n")
	if this.Tracks != nil {
		s = append(s, "Tracks: "+fmt.Sprintf("%#v", this.Tracks)+",\n")
	}
	if this.CoverArt != nil {
		s = append(s, "CoverArt: "+fmt.Sprintf("%#v", this.CoverArt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaPlaylist) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&av.MediaPlaylist{")
	s = append(s, "TotalItems: "+fmt.Sprintf("%#v", this.TotalItems)+",\n")
	s = append(s, "TotalDuration: "+fmt.Sprintf("%#v", this.TotalDuration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MediaProviderInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&av.MediaProviderInfo{")
	s = append(s, "CommonName: "+fmt.Sprintf("%#v", this.CommonName)+",\n")
	s = append(s, "RequiresSubscription: "+fmt.Sprintf("%#v", this.RequiresSubscription)+",\n")
	s = append(s, "RequiresInternet: "+fmt.Sprintf("%#v", this.RequiresInternet)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAv(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *LoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenExpires != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.TokenExpires))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TokenValue) > 0 {
		i -= len(m.TokenValue)
		copy(dAtA[i:], m.TokenValue)
		i = encodeVarintAv(dAtA, i, uint64(len(m.TokenValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pass) > 0 {
		i -= len(m.Pass)
		copy(dAtA[i:], m.Pass)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Pass)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintAv(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoginCreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginCreateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoginCreateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatVersion != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.ChatVersion))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChatStatus) > 0 {
		i -= len(m.ChatStatus)
		copy(dAtA[i:], m.ChatStatus)
		i = encodeVarintAv(dAtA, i, uint64(len(m.ChatStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TimestampExpires) > 0 {
		i -= len(m.TimestampExpires)
		copy(dAtA[i:], m.TimestampExpires)
		i = encodeVarintAv(dAtA, i, uint64(len(m.TimestampExpires)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CategoryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CategoryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CategoryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TimestampModified) > 0 {
		i -= len(m.TimestampModified)
		copy(dAtA[i:], m.TimestampModified)
		i = encodeVarintAv(dAtA, i, uint64(len(m.TimestampModified)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TimestampCreated) > 0 {
		i -= len(m.TimestampCreated)
		copy(dAtA[i:], m.TimestampCreated)
		i = encodeVarintAv(dAtA, i, uint64(len(m.TimestampCreated)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Subtype) > 0 {
		i -= len(m.Subtype)
		copy(dAtA[i:], m.Subtype)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Subtype)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Subtype) > 0 {
		i -= len(m.Subtype)
		copy(dAtA[i:], m.Subtype)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Subtype)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayableMediaItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayableMediaItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayableMediaItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoverArt) > 0 {
		for iNdEx := len(m.CoverArt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoverArt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.Tracks) > 0 {
		for iNdEx := len(m.Tracks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tracks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if m.ReleaseDate != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.ReleaseDate))
		i--
		dAtA[i] = 0x70
	}
	if m.Popularity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Popularity))))
		i--
		dAtA[i] = 0x65
	}
	if m.Seconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Seconds))))
		i--
		dAtA[i] = 0x59
	}
	if m.ItemNumber != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.ItemNumber))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Collection) > 0 {
		i -= len(m.Collection)
		copy(dAtA[i:], m.Collection)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Collection)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AuthorDesc) > 0 {
		i -= len(m.AuthorDesc)
		copy(dAtA[i:], m.AuthorDesc)
		i = encodeVarintAv(dAtA, i, uint64(len(m.AuthorDesc)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAv(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Flags != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MediaPlaylist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaPlaylist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaPlaylist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDuration != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TotalDuration))))
		i--
		dAtA[i] = 0x31
	}
	if m.TotalItems != 0 {
		i = encodeVarintAv(dAtA, i, uint64(m.TotalItems))
		i--
		dAtA[i] = 0x28
	}
	return len(dAtA) - i, nil
}

func (m *MediaProviderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MediaProviderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MediaProviderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequiresInternet {
		i--
		if m.RequiresInternet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.RequiresSubscription {
		i--
		if m.RequiresSubscription {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.CommonName) > 0 {
		i -= len(m.CommonName)
		copy(dAtA[i:], m.CommonName)
		i = encodeVarintAv(dAtA, i, uint64(len(m.CommonName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAv(dAtA []byte, offset int, v uint64) int {
	offset -= sovAv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Pass)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.TokenValue)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	if m.TokenExpires != 0 {
		n += 1 + sovAv(uint64(m.TokenExpires))
	}
	return n
}

func (m *LoginCreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TimestampExpires)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.ChatStatus)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	if m.ChatVersion != 0 {
		n += 1 + sovAv(uint64(m.ChatVersion))
	}
	return n
}

func (m *CategoryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAv(uint64(m.Id))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Subtype)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.TimestampCreated)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.TimestampModified)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	return n
}

func (m *StationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAv(uint64(m.Id))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Subtype)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	return n
}

func (m *PlayableMediaItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovAv(uint64(m.Flags))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.AuthorDesc)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	l = len(m.Collection)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	if m.ItemNumber != 0 {
		n += 1 + sovAv(uint64(m.ItemNumber))
	}
	if m.Seconds != 0 {
		n += 9
	}
	if m.Popularity != 0 {
		n += 5
	}
	if m.ReleaseDate != 0 {
		n += 1 + sovAv(uint64(m.ReleaseDate))
	}
	if len(m.Tracks) > 0 {
		for _, e := range m.Tracks {
			l = e.Size()
			n += 2 + l + sovAv(uint64(l))
		}
	}
	if len(m.CoverArt) > 0 {
		for _, e := range m.CoverArt {
			l = e.Size()
			n += 2 + l + sovAv(uint64(l))
		}
	}
	return n
}

func (m *MediaPlaylist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalItems != 0 {
		n += 1 + sovAv(uint64(m.TotalItems))
	}
	if m.TotalDuration != 0 {
		n += 9
	}
	return n
}

func (m *MediaProviderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommonName)
	if l > 0 {
		n += 1 + l + sovAv(uint64(l))
	}
	if m.RequiresSubscription {
		n += 2
	}
	if m.RequiresInternet {
		n += 2
	}
	return n
}

func sovAv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAv(x uint64) (n int) {
	return sovAv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *LoginInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginInfo{`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Pass:` + fmt.Sprintf("%v", this.Pass) + `,`,
		`TokenValue:` + fmt.Sprintf("%v", this.TokenValue) + `,`,
		`TokenExpires:` + fmt.Sprintf("%v", this.TokenExpires) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoginCreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoginCreateResponse{`,
		`TimestampExpires:` + fmt.Sprintf("%v", this.TimestampExpires) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`ChatStatus:` + fmt.Sprintf("%v", this.ChatStatus) + `,`,
		`ChatVersion:` + fmt.Sprintf("%v", this.ChatVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CategoryInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CategoryInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Subtype:` + fmt.Sprintf("%v", this.Subtype) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`TimestampCreated:` + fmt.Sprintf("%v", this.TimestampCreated) + `,`,
		`TimestampModified:` + fmt.Sprintf("%v", this.TimestampModified) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StationInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StationInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Category:` + fmt.Sprintf("%v", this.Category) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Subtype:` + fmt.Sprintf("%v", this.Subtype) + `,`,
		`Image:` + fmt.Sprintf("%v", this.Image) + `,`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Summary:` + fmt.Sprintf("%v", this.Summary) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlayableMediaItem) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTracks := "[]*AssetTag{"
	for _, f := range this.Tracks {
		repeatedStringForTracks += strings.Replace(fmt.Sprintf("%v", f), "AssetTag", "amp.AssetTag", 1) + ","
	}
	repeatedStringForTracks += "}"
	repeatedStringForCoverArt := "[]*AssetTag{"
	for _, f := range this.CoverArt {
		repeatedStringForCoverArt += strings.Replace(fmt.Sprintf("%v", f), "AssetTag", "amp.AssetTag", 1) + ","
	}
	repeatedStringForCoverArt += "}"
	s := strings.Join([]string{`&PlayableMediaItem{`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`AuthorDesc:` + fmt.Sprintf("%v", this.AuthorDesc) + `,`,
		`Collection:` + fmt.Sprintf("%v", this.Collection) + `,`,
		`ItemNumber:` + fmt.Sprintf("%v", this.ItemNumber) + `,`,
		`Seconds:` + fmt.Sprintf("%v", this.Seconds) + `,`,
		`Popularity:` + fmt.Sprintf("%v", this.Popularity) + `,`,
		`ReleaseDate:` + fmt.Sprintf("%v", this.ReleaseDate) + `,`,
		`Tracks:` + repeatedStringForTracks + `,`,
		`CoverArt:` + repeatedStringForCoverArt + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaPlaylist) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaPlaylist{`,
		`TotalItems:` + fmt.Sprintf("%v", this.TotalItems) + `,`,
		`TotalDuration:` + fmt.Sprintf("%v", this.TotalDuration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MediaProviderInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MediaProviderInfo{`,
		`CommonName:` + fmt.Sprintf("%v", this.CommonName) + `,`,
		`RequiresSubscription:` + fmt.Sprintf("%v", this.RequiresSubscription) + `,`,
		`RequiresInternet:` + fmt.Sprintf("%v", this.RequiresInternet) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAv(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *LoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExpires", wireType)
			}
			m.TokenExpires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenExpires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginCreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginCreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginCreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampExpires", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampExpires = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatVersion", wireType)
			}
			m.ChatVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatVersion |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CategoryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CategoryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CategoryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampCreated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampCreated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampModified", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimestampModified = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayableMediaItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayableMediaItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayableMediaItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= MediaFlags(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNumber", wireType)
			}
			m.ItemNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Seconds = float64(math.Float64frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Popularity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Popularity = float32(math.Float32frombits(v))
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseDate", wireType)
			}
			m.ReleaseDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReleaseDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracks = append(m.Tracks, &amp.AssetTag{})
			if err := m.Tracks[len(m.Tracks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoverArt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoverArt = append(m.CoverArt, &amp.AssetTag{})
			if err := m.CoverArt[len(m.CoverArt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaPlaylist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaPlaylist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaPlaylist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalItems", wireType)
			}
			m.TotalItems = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalItems |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuration", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TotalDuration = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MediaProviderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MediaProviderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MediaProviderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAv
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiresSubscription", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiresSubscription = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiresInternet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RequiresInternet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAv = fmt.Errorf("proto: unexpected end of group")
)
